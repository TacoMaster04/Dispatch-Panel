import { app, BrowserWindow, globalShortcut, Menu, MenuItem } from "electron";
import electronLocalShortcut from "electron-localshortcut";
import installExtension, {
  REACT_DEVELOPER_TOOLS,
} from "electron-extension-installer";
import { ipcMain } from "electron";
import {
  ConfigSchemaType,
  configStore,
  LocationsSchemaType,
  locationsStore,
  SettingsSchemaType,
  settingsStore,
  StateSchemaType,
  stateStore,
  CONFIG_VERSION,
  LOCATIONS_VERSION,
  SETTINGS_VERSION,
  STATE_VERSION,
} from "./config";
import ElectronStore from "electron-store";
import { updateElectronApp } from "update-electron-app";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow | null = null;
let settingsWindow: BrowserWindow | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

// @ts-ignore
console.log(configStore.get("version"));
// @ts-ignore
if (configStore.get("version") !== CONFIG_VERSION) {
  console.warn(
    "Config out of date, resetting to defaults. (version " +
      CONFIG_VERSION +
      ")"
  );
  // @ts-ignore
  configStore.clear();
}
// @ts-ignore
if (locationsStore.get("version") !== LOCATIONS_VERSION) {
  console.warn(
    "Locations out of date, resetting to defaults. (version " +
      LOCATIONS_VERSION +
      ")"
  );
  // @ts-ignore
  locationsStore.clear();
}
// @ts-ignore
if (settingsStore.get("version") !== SETTINGS_VERSION) {
  console.warn(
    "Settings out of date, resetting to defaults. (version " +
      SETTINGS_VERSION +
      ")"
  );
  // @ts-ignore
  settingsStore.clear();
}
// @ts-ignore
if (stateStore.get("version") !== STATE_VERSION) {
  console.warn(
    "State out of date, resetting to defaults. (version " + STATE_VERSION + ")"
  );
  // @ts-ignore
  stateStore.clear();
}

// if auto-updates are enabled, enable them
// @ts-ignore
const settings = settingsStore.get("config");
console.log(settings);
if (settings.autoUpdate) {
  updateElectronApp();
}

const createMainWindow = (): BrowserWindow => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // Remove the default menu bar
  mainWindow.removeMenu();

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (process.env.NODE_ENV === "development") {
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  }

  return mainWindow;
};

const createSettingsWindow = (parent: BrowserWindow): BrowserWindow => {
  // Create the browser window.
  const settingsWindow = new BrowserWindow({
    height: 374,
    width: 300,
    resizable: false,
    webPreferences: {
      preload: SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    parent: parent,
  });

  // and load the index.html of the app.
  settingsWindow.loadURL(SETTINGS_WINDOW_WEBPACK_ENTRY);

  return settingsWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", async () => {
  if (process.env.NODE_ENV === "development") {
    await installExtension(REACT_DEVELOPER_TOOLS, {
      loadExtensionOptions: {
        allowFileAccess: true,
      },
    });
  }

  mainWindow = createMainWindow();

  electronLocalShortcut.register("CmdOrCtrl+S", () => {
    if (settingsWindow) {
      settingsWindow.focus();
    } else {
      settingsWindow = createSettingsWindow(mainWindow);
      settingsWindow.addListener("close", () => {
        settingsWindow = null;
      });
    }
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createMainWindow();
  }
});

const getStore = (
  store: string
): ElectronStore<
  ConfigSchemaType | LocationsSchemaType | SettingsSchemaType | StateSchemaType
> => {
  if (store === "config") {
    return configStore;
  }
  if (store === "locations") {
    return locationsStore;
  }
  if (store === "settings") {
    return settingsStore;
  }
  if (store === "state") {
    return stateStore;
  }
};

ipcMain.handle("electron-store-get", async (_, store, val) => {
  // @ts-ignore
  return getStore(store).get(val);
});
ipcMain.handle("electron-store-set", async (_, store, key, val) => {
  // @ts-ignore
  return getStore(store).set(key, val);
});
ipcMain.handle("reload", () => {
  mainWindow?.reload();
  settingsWindow?.reload();
});
